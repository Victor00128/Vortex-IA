
import React from 'react';
import { Sender, ChatMessage as Message } from '../types';
import FormattedMessage from './FormattedMessage';

interface ChatMessageProps {
  message: Message;
}

const ChatMessage: React.FC<ChatMessageProps> = ({ message }) => {
  const isUser = message.sender === Sender.User;

  // Alignment classes for the entire message row
  const containerClasses = `flex w-full my-2 ${isUser ? 'justify-end' : 'justify-start'}`;
  
  // Classes for the message bubble itself
  const bubbleClasses = `rounded-xl px-3 md:px-4 py-2 md:py-2.5 max-w-xs md:max-w-xl shadow-md flex flex-col ${
    isUser
      ? 'bg-blue-600 text-black rounded-br-none'
      : 'bg-zinc-700 text-black rounded-bl-none'
  }`;
  
  const speaker = isUser ? 'TÃº' : 'Bot';
  const speakerColor = isUser ? 'text-blue-200' : 'text-red-400';

  return (
    <div className={containerClasses}>
      <div className={bubbleClasses}>
        <div className={`font-bold text-xs md:text-sm mb-1 ${speakerColor}`}>{speaker}</div>
        
        {message.fileInfo && (
          <div className="border-l-2 border-blue-300 pl-2 mb-2 text-xs md:text-sm italic">
            Archivo adjunto: {message.fileInfo.name} ({(message.fileInfo.size / 1024).toFixed(2)} KB)
          </div>
        )}

        {message.text && <FormattedMessage text={message.text} />}
        
        {message.imageUrl && (
          <div className="mt-2">
            <img 
              src={`data:image/jpeg;base64,${message.imageUrl}`} 
              alt="Generated by AI" 
              className="rounded-lg w-full h-auto max-w-sm md:max-w-md"
            />
          </div>
        )}
      </div>
    </div>
  );
};

export default ChatMessage;